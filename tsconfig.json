{
  "compilerOptions": {
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "esModuleInterop": false,
    // 生成相应的 .map文件,
    "sourceMap": true,
    // 在表达式和声明上有隐含的 any类型时报错。（默认为false，个人建议也为false，可以兼容之前的js代码，这里改为true是为了我自己检测哪些类型需要处理）,
    "noImplicitAny": true,
    // 模块引入方式,
    "module": "esnext",
    // 指定ECMAScript目标版本,
    "target": "es5",
    // 决定如何处理模块,
    "moduleResolution": "node",
    // 编译过程中需要引入的库文件的列表。,
    "lib": [
      "esnext",
      "dom",
      "dom.iterable"
    ],
    //忽略所有库中的声明文件（ *.d.ts）的类型检查。,
    "skipLibCheck": true,
    // 在 .tsx文件里支持JSX,
    "jsx": "react",
    /* Base directory to resolve non-absolute module names. */
    "baseUrl": ".",
    /* Enable all strict type-checking options. */
    "strict": true,
    /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    /* Allow javascript files to be compiled. */
    "allowJs": true,
    /* Do not emit outputs. */
    "noEmit": true,
    /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "isolatedModules": true,
    /* Enables experimental support for ES7 decorators. */
    "experimentalDecorators": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true
  },
  "include": [
    // 这个表示处理根目录的src目录下所有的.ts和.tsx文件，并不是所有文件
    "src/*",
    "types/*"
  ],
  "exclude": [
    "node_modules"
  ]
}